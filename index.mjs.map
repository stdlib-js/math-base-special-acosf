{"version":3,"file":"index.mjs","sources":["../lib/poly_p.js","../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number-float64-base-to-float32';\n\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 0.16666586697101593;\n\t}\n\treturn float64ToFloat32(0.16666586697101593 + float64ToFloat32(x * float64ToFloat32(-0.04274342209100723 + float64ToFloat32(x * -0.008656363002955914)))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/12.2.0/lib/msun/src/e_acosf.c?view=markup}. The implementation follows the original, but has been modified according to project conventions.\n*\n* ```text\n* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.\n*\n* Developed at SunPro, a Sun Microsystems, Inc. business.\n* Permission to use, copy, modify, and distribute this\n* software is freely granted, provided that this notice\n* is preserved.\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number-float64-base-to-float32';\nimport isnanf from '@stdlib/math-base-assert-is-nanf';\nimport sqrtf from '@stdlib/math-base-special-sqrtf';\nimport absf from '@stdlib/math-base-special-absf';\nimport toWord from '@stdlib/number-float32-base-to-word';\nimport fromWord from '@stdlib/number-float32-base-from-word';\nimport PI from '@stdlib/constants-float32-pi';\nimport polyp from './poly_p.js';\n\n\n// VARIABLES //\n\nvar ALMOST_PI = 3.1415925026e+00;  // 0 10000000 10010010000111111011010 => 0x40490fda\nvar PIO2_HI = 1.5707962513e+00;    // 0 01111111 10010010000111111011010 => 0x3fc90fda\nvar PIO2_LO = 7.5497894159e-08;    // 0 01100111 01000100010000101101000 => 0x33a22168\nvar MASK_LO = 0xfffff000|0;        // 1 11111111 11111111111000000000000 => 4294963200 => 0xfffff000\nvar SMALL = 1.4901161193847656e-8; // 2^-26\nvar QS1 = -7.0662963390e-01;\nvar PIO2 = float64ToFloat32( PIO2_HI + PIO2_LO );\n\n\n// MAIN //\n\n/**\n* Computes the arccosine of a single-precision floating-point number.\n*\n* @param {number} x - input value\n* @returns {number} arccosine (in radians)\n*\n* @example\n* var v = acosf( 1.0 );\n* // returns 0.0\n*\n* @example\n* var v = acosf( 0.707 );\n* // returns ~0.7855\n*\n* @example\n* var v = acosf( NaN );\n* // returns NaN\n*/\nfunction acosf( x ) {\n\tvar idf;\n\tvar df;\n\tvar ax;\n\tvar z;\n\tvar p;\n\tvar q;\n\tvar r;\n\tvar s;\n\tvar c;\n\tvar w;\n\n\tif ( isnanf( x ) ) {\n\t\treturn NaN;\n\t}\n\tx = float64ToFloat32( x );\n\tif ( x < -1.0 || x > 1.0 ) {\n\t\treturn NaN;\n\t}\n\tif ( x === 1.0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( x === -1.0 ) {\n\t\treturn PI;\n\t}\n\tax = absf( x );\n\tif ( ax < 0.5 ) {\n\t\tif ( ax <= SMALL ) {\n\t\t\treturn PIO2; // acos(~0) = Ï€/2\n\t\t}\n\t\tz = float64ToFloat32( x * x );\n\t\tp = float64ToFloat32( z * polyp( z ) );\n\t\tq = float64ToFloat32( 1.0 + float64ToFloat32( z * QS1 ) );\n\t\tr = float64ToFloat32( p / q );\n\t\treturn float64ToFloat32( PIO2_HI - float64ToFloat32( x - float64ToFloat32( PIO2_LO - float64ToFloat32( x * r ) ) ) ); // eslint-disable-line max-len\n\t}\n\tif ( x < -0.5 ) {\n\t\tz = float64ToFloat32( 0.5 * float64ToFloat32( 1.0 + x ) );\n\t\tp = float64ToFloat32( z * polyp( z ) );\n\t\tq = float64ToFloat32( 1.0 + float64ToFloat32( z * QS1 ) );\n\t\ts = sqrtf( z );\n\t\tr = float64ToFloat32( p / q );\n\t\tw = float64ToFloat32( float64ToFloat32( r * s ) - PIO2_LO );\n\t\treturn float64ToFloat32( ALMOST_PI - float64ToFloat32( 2.0 * float64ToFloat32( s + w ) ) ); // eslint-disable-line max-len\n\t}\n\t// x > 0.5\n\tz = float64ToFloat32( 0.5 * float64ToFloat32( 1.0 - x ) );\n\ts = sqrtf( z );\n\n\tidf = toWord( s );\n\tdf = fromWord( idf&MASK_LO );\n\n\tc = float64ToFloat32( float64ToFloat32( z - float64ToFloat32( df * df ) ) / float64ToFloat32( s + df ) ); // eslint-disable-line max-len\n\tp = float64ToFloat32( z * polyp( z ) );\n\tq = float64ToFloat32( 1.0 + float64ToFloat32( z * QS1 ) );\n\tr = float64ToFloat32( p / q );\n\tw = float64ToFloat32( float64ToFloat32( r * s ) + c );\n\treturn float64ToFloat32( 2.0 * float64ToFloat32( df + w ) );\n}\n\n\n// EXPORTS //\n\nexport default acosf;\n"],"names":["evalpoly","x","float64ToFloat32","PIO2_HI","PIO2_LO","QS1","PIO2","acosf","idf","df","ax","z","p","q","r","s","c","w","isnanf","NaN","PI","absf","polyp","sqrtf","toWord","fromWord"],"mappings":";;4rBAyCA,SAASA,EAAUC,GAClB,OAAW,IAANA,EACG,mBAEDC,EAAiB,mBAAsBA,EAAiBD,EAAIC,GAAkB,mBAAsBA,GAAsB,oBAALD,KAC7H,CCEA,IACIE,EAAU,aACVC,EAAU,gBAGVC,GAAO,YACPC,EAAOJ,EAAkBC,EAAUC,GAuBvC,SAASG,EAAON,GACf,IAAIO,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAEJ,OAAKC,EAAQjB,KAGbA,EAAIC,EAAkBD,KACZ,GAAOA,EAAI,EAHbkB,IAMG,IAANlB,EACG,GAEI,IAAPA,EACGmB,GAERV,EAAKW,EAAMpB,IACD,GACJS,GApDK,sBAqDFJ,GAERK,EAAIT,EAAkBD,EAAIA,GAC1BW,EAAIV,EAAkBS,EAAIW,EAAOX,IACjCE,EAAIX,EAAkB,EAAMA,EAAkBS,EAAIN,IAClDS,EAAIZ,EAAkBU,EAAIC,GACnBX,EAAkBC,EAAUD,EAAkBD,EAAIC,EAAkBE,EAAUF,EAAkBD,EAAIa,OAEvGb,GAAK,IACTU,EAAIT,EAAkB,GAAMA,EAAkB,EAAMD,IACpDW,EAAIV,EAAkBS,EAAIW,EAAOX,IACjCE,EAAIX,EAAkB,EAAMA,EAAkBS,EAAIN,IAClDU,EAAIQ,EAAOZ,GACXG,EAAIZ,EAAkBU,EAAIC,GAC1BI,EAAIf,EAAkBA,EAAkBY,EAAIC,GAAMX,GAC3CF,EAxEO,aAwEuBA,EAAkB,EAAMA,EAAkBa,EAAIE,OAGpFN,EAAIT,EAAkB,GAAMA,EAAkB,EAAMD,IACpDc,EAAIQ,EAAOZ,GAEXH,EAAMgB,EAAQT,GACdN,EAAKgB,GA5EQ,KA4EEjB,GAEfQ,EAAId,EAAkBA,EAAkBS,EAAIT,EAAkBO,EAAKA,IAASP,EAAkBa,EAAIN,IAClGG,EAAIV,EAAkBS,EAAIW,EAAOX,IACjCE,EAAIX,EAAkB,EAAMA,EAAkBS,EAAIN,IAClDS,EAAIZ,EAAkBU,EAAIC,GAC1BI,EAAIf,EAAkBA,EAAkBY,EAAIC,GAAMC,GAC3Cd,EAAkB,EAAMA,EAAkBO,EAAKQ,IACvD"}